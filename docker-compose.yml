
# services:
#   # PostgreSQL-Datenbank
#   database:
#     image: postgres:17-alpine
#     environment:
#       POSTGRES_USER: myuser
#       POSTGRES_PASSWORD: mypassword
#       POSTGRES_DB: mydatabase
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     expose:
#       - "5432"

#   # Backend-Service
#   backend:
#     build: ./backend
#     environment:
#       DB_HOST: database  # Name des DB-Services in Compose
#       DB_PORT: 5432
#       DB_USER: myuser
#       DB_PASSWORD: mypassword
#       DB_NAME: mydatabase
#     expose:
#       - "3000"
#     depends_on:
#       - database

#   # Frontend-Service mit Nginx
#   frontend:
#     build: ./frontend
#     ports:
#       - "8080:80"
#     depends_on:
#       - backend

# # Volume für persistente DB-Daten
# volumes:
#   postgres_data:
    
version: '3.8'

services:
  # Frontend Service (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://backend:3000
    networks:
      - app-network

  # Backend Service (Node.js)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"  # WICHTIG: Port-Mapping hinzugefügt
    environment:
      - DB_HOST=database
      - DB_PORT=5432
      - DB_USER=myuser
      - DB_PASSWORD=mypassword
      - DB_NAME=mydatabase
      - PORT=3000
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app-network

  # Database Service (PostgreSQL)
  database:
    image: postgres:17-alpine
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
      - POSTGRES_DB=mydatabase
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydatabase"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge